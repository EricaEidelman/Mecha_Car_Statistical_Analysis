R --version
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in vector) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in class) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (x in class) {
combo <- sample(33,3)
print(x, combo)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (x in class) {
combo <- sample(33,3)
print(c(x,combo))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
second <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (second = "e"){
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
second <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (second == "e"){
print(student)
}
else{
next
}
}
---
title: "Navigation"
---
title: "Navigation"
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
sample_csv <- read_csv("../Resources/data.csv")
sample_csv <- read.csv("../Resources/data.csv")
sample_csv <- read_csv("../Resources/data.csv")
sample_csv <- read.csv("../Resources/data.csv")
head(sample_csv)
knitr::opts_chunk$set(echo = TRUE)
students <-read_csv("students.csv")
library(tidyverse)
students <-read_csv("../Resources/students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
school_names <- unique(students,school_name)
# unique(dataset, variable) displays unique elements from that column
school_names <- unique(students,students[school_name])
# unique(dataset, variable) displays unique elements from that column
school_names <- unique(students,students["school_name"])
# unique(dataset, variable) displays unique elements from that column
school_names <- unique(students,"school_name")
# unique(dataset, variable) displays unique elements from that column
school_names <- unique(students,students$"school_name")
# unique(dataset, variable) displays unique elements from that column
school_names <- unique(students,students$school_name)
# unique(dataset, variable) displays unique elements from that column
school_names <- unique(students$school_name)
# unique(dataset, variable) displays unique elements from that column
school_names <- unique(students$school_name)
print(school_names)
# Use length() to identify the number of schools
print(length(school_names))
# nrow() returns the number of rows
student_count <- nrow(students)
paste("There are a total of", student_count, "students.")
mean_reading_score <- mean(students$reading_score)
paste("The average reading score is", mean_reading_score)
mean_math_score <- mean(students$math_score)
paste("The average math score is", mean_math_score)
mean_reading_score <- round(mean(students$reading_score),2)
paste("The average reading score is", mean_reading_score)
mean_math_score <- round(mean(students$math_score),2)
paste("The average math score is", mean_math_score)
number_passing_reading <- filter(students$reading_score > 70)
number_passing_reading <- filter(students,students$reading_score > 70)
percentage_passing_reading <- number_passing_reading/student_count*100
number_passing_reading <- filter(students, reading_score > 70)
count_passing_reading <- nrow(number_passing_reading)
percentage_passing_reading <- number_passing_reading/student_count*100
number_passing_reading <- filter(students, reading_score > 70)
count_passing_reading <- nrow(number_passing_reading)
percentage_passing_reading <- count_passing_reading/student_count*100
paste(percentage_passing_reading, "% of the students have passing reading scores.")
number_passing_reading <- filter(students, reading_score >= 70)
count_passing_reading <- nrow(number_passing_reading)
percentage_passing_reading <- count_passing_reading/student_count*100
paste(percentage_passing_reading, "% of the students have passing reading scores.")
number_passing_math <- filter(students, reading_score >= 70)
count_passing_math <- nrow(number_passing_reading)
percentage_passing_math <- count_passing_math/student_count*100
paste(percentage_passing_math, "% of the students have passing math scores.")
number_passing_math <- filter(students, math_score >= 70)
count_passing_math <- nrow(number_passing_math)
percentage_passing_math <- count_passing_math/student_count*100
paste(percentage_passing_math, "% of the students have passing math scores.")
number_passing_both <- filter(students, math_score >= 70 & reading_score >= 70)
count_passing_both <- nrow(nbothumber_passing_both)
number_passing_both <- filter(students, math_score >= 70 & reading_score >= 70)
count_passing_both <- nrow(number_passing_both)
percentage_passing_math <- count_passing_both/student_count*100
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
number_passing_both <- filter(students, math_score >= 70 & reading_score >= 70)
count_passing_both <- nrow(number_passing_both)
percentage_passing_overall <- count_passing_both/student_count*100
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
grouped_by_school <- group_by(students,school_name)
summarize(grouped_by_school,mean(math_score), mean(reading_score))
grouped_by_school <- group_by(students,school_name,grade)
summarize(grouped_by_school,mean(math_score), mean(reading_score))
setwd("C:/Users/eee33/Desktop/Personal/Columbia/Week 15/Mecha_Car_Statistical_Analysis")
library(dplyr)
mecha_car <- read.csv("MechaCar_mpg.csv")
lm(mpg ~ vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD,data=mecha_car)
summary(lm(mpg ~ vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD,data=mecha_car))
suspension_coil <- read.csv("Suspension_Coil.csv")
total_summary <- summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
total_summary <- summarize(Mean=mean("PSI"), Median=median("PSI"), Variance=var("PSI"), SD=sd("PSI"))
total_summary <- summarize(Mean=mean("PSI") + Median=median("PSI") + Variance=var("PSI") + SD=sd("PSI"))
total_summary <- suspension_coil %>% summarize(Mean=mean("PSI"), Median=median("PSI"), Variance=var("PSI"), SD=sd("PSI"))
View(total_summary)
total_summary <- suspension_coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(total_summary)
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(lot_summary)
t.test(mean(PSI), mu=1500)
t.test(mean(suspension_coil$PSI), mu=1500)
t.test(suspension_coil$PSI, mu=1500)
t.test(subset(suspension_coil$Manufacturing_Lot="Lot1"), mu=1500)
t.test(subset(suspension_coil$Manufacturing_Lot=="Lot1"), mu=1500)
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot1"), mu=1500)
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot1")["Manufacturing_Lot"], mu=1500)
lot_1 <- subset(suspension_coil,Manufacturing_Lot=="Lot1")
library(dplyr)
mecha_car <- read.csv("MechaCar_mpg.csv")
lm(mpg ~ vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD,data=mecha_car)
summary(lm(mpg ~ vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD,data=mecha_car))
suspension_coil <- read.csv("Suspension_Coil.csv")
total_summary <- suspension_coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
t.test(suspension_coil$PSI, mu=1500)
t.test(subset(suspension_coil,Manufacturing_Lot=="Lot1")[PSI], mu=1500)
t.test(subset(suspension_coil,Manufacturing_Lot=="Lot1")["PSI"], mu=1500)
View(lot_summary)
t.test(subset(suspension_coil,Manufacturing_Lot=="Lot2")["PSI"], mu=1500)
t.test(subset(suspension_coil,Manufacturing_Lot=="Lot3")["PSI"], mu=1500)
